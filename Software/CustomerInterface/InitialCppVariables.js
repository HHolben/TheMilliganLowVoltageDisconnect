// *************** Liquid crystal display related variables ***************
const LiquidCrystalDisplayVariablesSection = `
// This section of the code is generated by index.html using InitialCppVariables.js
static int scrollPosition = 0;
bool selectPressed = false; // Select button latch
static bool ReturnToStatusPage = false;
`;

// *************** Voltage Probe related variables ***************
const VoltageProbeSpecifications = `
// This section of the code is generated by index.html using InitialCppVariables.js
const float Resistor1 = 11100; //ohms
const float Resistor2 = 2210; //ohms
`;

// *************** Global Variables ***************
const GlobalVariables = `
// This section of the code is generated by index.html using InitialCppVariables.js
String DeviceName = "${DeviceName}";
String DeviceNameTemp = DeviceName;
float NominalVoltage = ${NominalVoltage};
float TempNominalVoltage = NominalVoltage;
float ShutOffVoltage = ${ShutOffVoltage};
float TempShutOffVoltage = ShutOffVoltage;
float TurnBackOnVoltage = ${TurnBackOnVoltage};
float TempTurnBackOnVoltage = TurnBackOnVoltage;
unsigned long OverrideDelay = ${OverrideDelay * 60000}; // milliseconds
unsigned long TempOverrideDelay = OverrideDelay;
unsigned long TimerOffset = ${TimerOffset * 1000}; // milliseconds
const int DisconnectBufferTime = ${ShutOffVoltageTimer}; // Number of seconds to add to Disconnect timer (minimum value)
int LanguageSetting = ${LanguageSetting};
int TempLanguageSetting = LanguageSetting;
int DeviceSetting = ${DeviceSelection};
int SelectedPage = 0;
int OutputState = 0;
bool OverrideDelayLatch = false;
int LastOverrideButtonState = HIGH;
bool OverridePressed = false;
bool OverrideWhileOffAllowed = true;
unsigned long MaxOverrideDelay = 90 * 60000; // puts limit of 90 minutes
int ReconnectDelay = 10000;
const int numReadings = 20; // Adjust the number of readings based on your preferences
float readings[numReadings]; // Array to store readings
int index = 0; // Index for storing new readings
static unsigned long StartTime = 0;
static unsigned long EndTime = 0;
static bool TimerHasStarted = false;
unsigned long OverrideCurrentTime = 0;
unsigned long OverrideEndTime = 0;
static bool OverrideTimerHasStarted = false;
static bool ReconnectTimerHasStarted = false;
`;

// *************** Timer-related variables ***************
const TimerRelatedVariables = `
// This section of the code is generated by index.html using InitialCppVariables.js
unsigned long previousMillis = 0;
unsigned long RolloverTime = (pow(2, 32) - 1); // Set an interval in milliseconds to ensure that millis() rollover is never an issue for more than 10 minutes
`;

// *************** Get Pin Assignments ***************
const GetPinAssignments = `
// This section of the code is generated by index.html using InitialCppVariables.js
int VoltageProbe = ${PinData[DeviceSelection].VoltageProbe};
int lcdSDA = ${PinData[DeviceSelection].lcdSDA};
int lcdSCL = ${PinData[DeviceSelection].lcdSCL};
int EncoderCLK = ${PinData[DeviceSelection].EncoderCLK};
int EncoderDT = ${PinData[DeviceSelection].EncoderDT};
int EncoderSW = ${PinData[DeviceSelection].EncoderSW};
int OverrideDelayButton = ${PinData[DeviceSelection].OverrideDelayButton};
int OverrideLight = ${PinData[DeviceSelection].OverrideLight};
int RelayOutput = ${PinData[DeviceSelection].RelayOutput};
int InputUp = ${PinData[DeviceSelection].InputUp};
int InputDown = ${PinData[DeviceSelection].InputDown};
int InputRight = ${PinData[DeviceSelection].InputRight};
int InputLeft = ${PinData[DeviceSelection].InputLeft};
int InputSelect = ${PinData[DeviceSelection].InputSelect};
`;



/*Encoder Related Global Variables*/const EncoderRelatedGlobalVariables =
      `\n`
      +
      `//*************** Encoder Related Global Variables: *************** this section of the code is generated by index.html using InitialCppVariables.js ***************`
      +
      `\n \n \t`
  +
  `\n \n \t`
  +
  `Encoder myEncoder(EncoderCLK, EncoderDT);   // (Clk,DT)`
 +
 `\n \n \t`
 + 
 `long oldPosition = -999;   //Initialize initial encoder Position (For Scroll())`
+
`\n \n \t`
+  
`const int scrollThreshold = 2;`
+
`\n \n \t`
+  
`int EncoderDirection = 0;     //Idle By Default`
+
`\n \n \t`
+  
`long newPosition = myEncoder.read();`
+
`\n \n \t`
+  
`const int MaximumEncoderPosition = 4;`
+
`\n \n \t`
+  
`long oldPosition2 = 0;    //Initialize initial encoder Position (For Select())`
 +
 `\n \n \t`
 + 
 `static int lastEncoderSelectState = HIGH; //Used for Select`


      +
      `\n`
      ;


/*Button Related Global Variables*/const ButtonRelatedGlobalVariables =
      `\n` 
      +
      `//*************** Button Related Global Variables: *************** this section of the code is generated by index.html using InitialCppVariables.js ***************`
      +
      `\n \n \t`
      +
      `long oldPosition = -999;`
      +
      `\n \t`
      +
      `static int lastEncoderSelectState = HIGH;`
      +
      `\n`
      ;
