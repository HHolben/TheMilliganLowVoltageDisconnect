/*Void Default Screen State*/var DefaultMenuPageScreenState =
       //To start, we will just set up the menu page enum
       `\n`
       +
       `//*************** Default Menu Page Screens: *************** this section of the code is generated by index.html using PagesLCD.js ***************`
       +
       `\n \t`
       +
       `enum MODE`
       +
       `\n \t \t`
       +
        `{`
       +
       `\n \t \t`
       +
       `LVD,`
       +
       `\n \t \t`
       +
       `OVERRIDE`
       +
       `\n \t \t`
       +
       `};`
       +
       `\n \t \t`
       +
       `MODE currentMode = LVD; //default mode`    
       +
       `\n \t`
       +
       `//add more modes as needed`
       ;

            
           

       DefaultMenuPageScreenState = DefaultMenuPageScreenState
       +
       `\n \t \t`      
       +
       `enum Page`
       +
       `\n \t \t`
       +
       `{`
       +DefaultMenuPageScreenStateEnumItems
        ;

       


        DefaultMenuPageScreenState = DefaultMenuPageScreenState
        +       
        `\n \t \t`
       +
       `}; // end enum Page;`
       +
       `\n \t`
       +
       `Page currentPage = STATUS_PAGE; //default page`
       +
       
       `\n \t`
       +
       `//add more pages as needed`
       +
       `\n`
       ;
       

/*Status Pages*/       var StatusPage =
       `\n`
       +
       `//*************** Status Page *************** this section of the code is generated by index.html using PagesLCD.js ***************`
       +
       `\n \t`
       +
       `void StatusPageScreen()`
       +
       `\n \t`
       +
       `{`
       +
       `\n \t \t`
       +
       `String PageHeader[2] = {"       Status:      ", "       Estado:      "};`
       +
       `\n \t \t`
       +
       `String ConnectionStatus[][2] = {{"Load Disconnected   ", "Carga Desconectada  "}, {"Load Connected      ", "Carga Conectada     "}};`
       +
       `\n \t \t`
       +
       `String BatteryVoltageStatus[2] = {"Measurement(v):", "Voltaje Medido:"};`
       +
       `\n \t \t`
       +
       `String OverrideStatus[][2] = {{"Override: On        ", "Con Anular          "}, {"Override: Off       ", "Sin Anular"}};`
       +
       `\n \t \t`
       +
       `lcd.setCursor(0,0);`
       +
       `\n \t \t`
       +
       `lcd.print(PageHeader[LanguageSetting]);`//print the menu title "Status:"
       +
       `\n \t \t`
       +
       `lcd.setCursor(0,1);`
       +
       `\n \t \t`
       +
       `lcd.print(ConnectionStatus[OutputState][LanguageSetting]);`//print the connection status for on or off
       +
       `\n \t \t`
       +
       `lcd.setCursor(0,2);`
       +
       `\n \t \t`
       +
       `lcd.print(BatteryVoltageStatus[LanguageSetting]);`//print the measured boltage. The comma after MeasureVoltage indicates to print to only 2 decimal places on the LCD display
       +
       `\n \t \t`
       +
       `lcd.setCursor(15,2);`
       +
       `\n \t \t`
       +
       `lcd.print(MeasureVoltage(),1);`
       +
       `\n \t \t`
       +
       `lcd.setCursor(0,3);`
       +
       `\n \t \t`
       +
       `lcd.print(OverrideStatus[!OverrideDelayLatch][LanguageSetting]);`//print the menu title "Status:"
       +
       `\n \t`
       +
       `} // end of StatusPageScreen()`
       +
       `\n`
       ;

/*Adjust Nominal Voltage Page*/var AdjustNominalVoltagePage = 
        `\n`
        +
        `//*************** AdjustNominalVoltage Page *************** this section of the code is generated by index.html using PagesLCD.js ***************`
        +
        `\n \n \t`
        +
        `void AdjustNominalVoltage()`
        +
        `\n \t`
        +
        `{`
        +
        `\n \t \t`
        +
        `String NominalVoltagePageItems[][2] = {{"Battery Voltage     ", "Voltaje del banco   "},{" volts        ", " voltios     "},{"Cancel ", "Cancelar  "},{"Confirm", "  Confirmar"}};`
        +
        `\n \t \t`
        +
        `lcd.setCursor(0,0);`
        +
        `\n \t \t`
        +
        `lcd.print(NominalVoltagePageItems[0][LanguageSetting]+" ");`
        +
        `\n \t \t`
        +
        `lcd.setCursor(0,1);`
        +
        `\n \t \t`
        +
        `lcd.print(NominalVoltage + NominalVoltagePageItems[1][LanguageSetting]);`
 	 	+
        `\n \t \t`
        +
        `lcd.setCursor(0,2);`
 	 	+
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	 	+
        `\n \t \t`
        +
        `lcd.setCursor(0,3);`
 	 	+
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	 	+
        `\n \t`
        +
        `} //end Adjust Nominal Voltage`
        +
        `\n`
        ;

/*Menu Page*/var MenuPage = 
        `\n`
        +
        `//*************** Menu Page *************** this section of the code is generated by index.html using PagesLCD.js ***************`
        +
        `\n \n \t`
        +
        `//LCD Screen Menu Page Case Statements: `
        +
        `\n \t`
        +
        `void MenuPageScreens(int scrollPosition)`
        +
        `\n \t`
        +
        `{`
        +
        `\n \t \t`
        +
        `switch(scrollPosition)`
        +
        `\n \t \t`
        +
        `{`
        +
        `\n \t \t \t`
        ;
        for (var i = 0; i < Adjustables.length; i++) 
        {
            if(i<MaximumRowNumber)
            {
                var MenuPage = MenuPage+
                `case ` + i +`:`
                +
                `\n \t \t \t`
                ;
                for (var j = 0; j < MaximumRowNumber; j++) 
                {
                    var MenuPage = MenuPage
                    +
                    `lcd.setCursor(0,`+j+`);`
                    +
                    `\n \t \t \t`
                    ;
                    if (j==i)//this is for the line on the string that shows which option the arrow goes on
                    {
                        var MenuPage = MenuPage
                        +
                        `lcd.print(">"+`
                         ;
                    }//end if j=i
                    else //this is for leaving a space for the arrow to go
                    {
                        var MenuPage = MenuPage
                        +
                        `lcd.print(" "+`
                        ;        
                    }//end else
                    var MenuPage = MenuPage
                    +
                    `InterfaceItems[`+j+`][LanguageSetting]);`
                    +
                    `\n \t \t \t`
                    ;
                }//end for j = 0
                var MenuPage = MenuPage
                +
                `break;`
                +
                `\n \n \t \t \t`
                ;
            }//end (if i<MaximumRowNumber)
            else
            {
                var MenuPage = MenuPage
                +
                `case ` + i +`:`
                +
                `\n \t \t \t`
                ;
                for (var j = i-MaximumRowNumber+1; j <= i; j++) 
                {
                    var MenuPage = MenuPage
                    +
                    `lcd.setCursor(0,`+j+`);`
                    +
                    `\n \t \t \t`
                    ;
                    if (j==i)
                    {
                        var MenuPage = MenuPage
                        +
                        `\n \t \t \t`
                        +
                        `lcd.print(">"+`
                        ;
                    }//end if j==i
                    else
                    {
                        var MenuPage = MenuPage
                        +
                        `lcd.print(" "+`
                        ;        
                    }//end else
                    var MenuPage = MenuPage
                    +
                    `InterfaceItems[`+j+`][LanguageSetting]);`
                    +
                    `\n \t \t \t`
                    ;
                }//end for j = 0
                var MenuPage = MenuPage
                +
                `break;`
                +
                `\n \n \t \t \t`
                ;
            }//end else
         }//end for i = 0
         var MenuPage = MenuPage
         +
         `\n \t \t`
         +
         `}// end switch(scrollPosition)`
         +
         `\n \t`
         +
         `}// end MenuPageScreens`
         +
         `\n`
         ;

/*Nominal Voltage End-user interface menu*/var AdjustCutOffVoltagePage = 
         `\n \t`
         +
         `void AdjustCutOffVoltagePage()`
         +
         `\n \t`
         +
         `{`
 	        +
         `\n \t \t`
         +
         `String ShutOffVoltagePageItems[][2] = {{"Cut-Off Voltage     ", "Voltaje de Cortar       "},{" volts          ", " voltios            "},{"Cancel ", "Cancelar  "},{" Confirm", "  Confirmar"}};`
 	        +
         `\n \t \t`
         +
         `lcd.setCursor(0,0);`
         +
         `\n \t \t`
         +
         `lcd.print(ShutOffVoltagePageItems[0][LanguageSetting]+" ");`
 	        +
         `\n \t \t`
        +
        `lcd.setCursor(0,1);`
        +
        `\n \t \t`
       +
        `lcd.print(ShutOffVoltage+ShutOffVoltagePageItems[1][LanguageSetting]);`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,2);`
 	       +
        `\n \t \t`
        +       
        `lcd.print("                    ");`
        +
        `\n \t \t`
        +
        `lcd.setCursor(0,3);`
 	       +
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	       +
        `\n \t`
        +
        `} //end of AdjustCutOffVoltagePage`
        +
        `\n`
        ;

/*Adjust Reconnect Voltage Page*/var AdjustReconnectVoltagePage = 
         `\n`
        +
        `void AdjustReconnectVoltagePage()`
        +
         `\n \t`
        +
        `{`
 	       +
        `\n \t \t`
        +
        `String ReconnectVoltagePageItems[][2] = {{"Reconnect Voltage   ", "Voltaje de Reconectar"},{" volts        ", " voltios    "}};`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,0);`
 	       +
        `\n \t \t`
        +
        `lcd.print(ReconnectVoltagePageItems[0][LanguageSetting]+" ");`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,1);`
 	       +
        `\n \t \t`
        +
        `lcd.print(TurnBackOnVoltage + ReconnectVoltagePageItems[1][LanguageSetting]);`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,2);`
 	       +
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,3);`
 	       +
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	       +
        `\n \t \t`
        +
        `} // end AdjustReconnectVoltagePage`
        +
        `\n`
        ;

/*Override Time Page*/var AdjustOverrideTimePage = 
        `\n \t`
        +
        `void AdjustOverrideTimePage()`
        +             
        `\n \t`
        +
        `{` 
 	       +
        `\n \t \t`
        +
        `String OverrideTimePageItems[][2] = {{"Override Time       ", "Tiempo de anulacion "},{" minutes           ", " minutos          "}};`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,0);`
 	       +
        `\n \t \t`
        +
        `lcd.print(OverrideTimePageItems[0][LanguageSetting]+" ");`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,1);`
 	       +
        `\n \t \t`
        +
        `lcd.print(OverrideDelay/60000+ OverrideTimePageItems[1][LanguageSetting]); //the divide by 60000 converts to minutes` 
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,2);`
 	       +
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	       +
        `\n \t \t`
        +
        `lcd.setCursor(0,3);`
 	       +
        `\n \t \t`
        +
        `lcd.print("                    ");`
 	       +
        `\n \t`
        +
        `}`
        +
        `\n`
        ;


        /*Nominal Voltage End-user interface menu*/var ChangeLanguagePage = 

        `\n \t`
        +
        `void ChangeLanguage()`
        +
        `\n \t`
        +
        `{`
            +
        `\n \t \t`
        +
        `String ChangeLanguagePageItems[][2] = {{"Language/Lengua", "Language/Lengua"},{"English          ", " Espanol            "},{"Cancel ", "Cancelar  "},{" Confirm", "  Confirmar"}};`
            +
        `\n \t \t`
        +
        `lcd.setCursor(0,0);`
        +
        `\n \t \t`
        +
        `lcd.print(ChangeLanguagePageItems[0][LanguageSetting]+" ");`
            +
        `\n \t \t`
       +
       `lcd.setCursor(0,1);`
       +
       `\n \t \t`
      +
       `lcd.print(ChangeLanguagePageItems[1][LanguageSetting]);`
           +
       `\n \t \t`
       +
       `lcd.setCursor(0,2);`
           +
       `\n \t \t`
       +       
       `lcd.print("                    ");`
       +
       `\n \t \t`
       +
       `lcd.setCursor(0,3);`
           +
       `\n \t \t`
       +
       `lcd.print("                    ");`
           +
       `\n \t`
       +
       `} //end of ChangeLanguagePage`
       +
       `\n`
       ;