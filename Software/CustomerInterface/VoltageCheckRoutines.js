       
/*Low Voltage Check*/const LowVoltageCheck =     
     `\n`
     +
     `//*************** Void Loop Low Voltage Check Section *************** this section of the code is generated by index.html using VoltageCheckRoutines.js ***************`
     +
     `\n \n \t \t`
     +
     `//Low Voltage Disconnection`
     +
     `\n \t \t`
     +
     `switch (currentState)`
     +
     `\n \t \t`
     +
     `{`
     +
     `\n \t \t \t`
     +
     `case SCROLLING:`
     +
     `\n \t \t \t`
     +
     `Scroll();`
     +
     `\n \t \t \t`
     +
     `break;`
     +
     `\n \t \t \t`
     +
     `case SELECTING:`
     +
     `\n \t \t \t`
     +
     `// Perform actions when the select is pressed`
     +
     `\n \t \t \t`
     +
     `Select(SelectedPage);`
     +
     `\n \t \t \t`
     +
     `// Transition back to SCROLLING state if select is released`
     +
     `\n \t \t \t`
     +
     `break;`
     +
     `\n \t \t`
     +
     `} //end of case SELECTING`
     +
     `\n \t \t`
     +
     `if (OverrideDelayLatch)   //If Override Button is pressed`
     +
     `\n \t \t`
     +
     `{`
     +
     `\n \t \t \t`
     +
     `digitalWrite(OverrideLight, HIGH);`
     +
     `\n \t \t \t`
     +
     `if (OutputState == 0 && OverrideWhileOffAllowed)`
     +
     `\n \t \t \t`
     +
     `{             //If system is off (AND has been off) and Override allowed`
     +
     `\n \t \t \t \t`
     +
     `TurnOnOutput();`
     +
     `\n \t \t \t`
     +
     `} // end if (OutputState == 0 && OverrideWhileOffAllowed)`
     +
     `\n \t \t \t`
     +
     `// end of if`
     +
     `\n \t \t \t`
     +
     `if (OutputState == 0 && (OverrideWhileOffAllowed == false))`
     +
     `\n \t \t \t`
     +
     `{    //If system is off (AND has been off) and Override NOT allowed`
     +
     `\n \t \t \t \t`
     +
     `   //Don't do anything or flash a message saying "Not Permitted"`
     +
     `\n \t \t \t`
     +
     `} // end if (OutputState == 0 && (OverrideWhileOffAllowed == false))`
     +
     `\n \t \t \t`
     +
     `if(OutputState == 1)`
     +
     `\n \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t`
     +
     `if (MeasureVoltage() < ShutOffVoltage)   //Probably need to combine OutputState = 1 && Voltage < Cutoff, then have an else if OutputState = 1 && Voltage > Cutoff(Do Nothing)  ` 
     +
     `\n \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t`
     +
     `if (OverrideTimerHasStarted ==false)`
     +
     `\n \t \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t \t`
     +
     `StartTime = TimeSinceBoot();`
     +
     `\n \t \t \t \t \t \t`
     +
     `EndTime = OverrideTimerEnd();   //e.g. 22seconds runtime + 30seconds = static 55seconds`
     +
     `\n \t \t \t \t \t \t`
     +
     `OverrideTimerHasStarted == true;`
     +
     `\n \t \t \t \t \t`
     +
     `}`
     +
     `\n \t \t \t \t \t`
     +
     `TurnOnOutput();   //Keep the output on, might not be what we want here.`
     +
     `\n \t \t \t \t \t`
     +
     `unsigned long currentTime = TimeSinceBoot();`
     +
     `\n \t \t \t \t \t`
     +
     `if(currentTime < EndTime)`
     +
     `\n \t \t \t \t \t`      
     +
     `{`
     +
     `\n \t \t \t \t \t \t`
     +
     `unsigned long remainingTime = EndTime - currentTime;  //55seconds - 25seconds = 20seconds remain`
     +
     `\n \t \t \t \t \t \t`
     +
     ` // Other tasks can run here while the timer is active`
     +
     `\n \t \t \t \t \t`  
     +
     `}   // end of if(currentTime < EndTime)`
     +
     `\n \t \t \t \t \t`
     +
     `else`
     +
     `\n \t \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t \t`
     +
     `TurnOffOutput();`
     +
     `\n \t \t \t \t \t \t`
     +
     `OverrideDelayLatch = false;`
     +
     `\n \t \t \t \t \t \t`
     +
     `OverrideTimerHasStarted = false;`
     +
     `\n \t \t \t \t \t`
     +
     `} // end of else statement`
     +
     `\n \t \t \t \t`
     +
     `} // end of if MeasureVoltage()<ShutOffVoltage`
     +
     `\n \t \t \t \t`
     +
     `else`
     +
     `\n \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t`
     +
     `OverrideTimerHasStarted = false;      //This resets the timer if the voltage goes back to stable state.`
     +
     `\n \t \t \t \t`
     +
     `} //end else`
     +
     `\n \t \t \t `
     +
     `} // end if(OutputState == 1)`
     +
     `\n \t \t`
     +
     `}//end if (OverrideDelayLatch)`
     +
     `\n \t \t`
     +
     `else //Normal Operation when Override is NOT Active`
     +
     `\n \t \t`
     +
     `{`
     +
     `\n \t \t \t`
     +      
     `digitalWrite(OverrideLight,LOW);   //OverrideLightOff`
     +
     `\n \t \t \t`
     +   
     `if (MeasureVoltage() < ShutOffVoltage)  `    
     +
     `\n \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t`
     +
     `if (TimerHasStarted ==false)`
     +
     `\n \t \t \t \t`
     +
     `{`       
     +
     `\n \t \t \t \t \t`
     +
     `StartTime = TimeSinceBoot();`
     +
     `\n \t \t \t \t \t`
     +
     `EndTime = DisconnectBufferTimerEnd();   //e.g. 22seconds runtime + 30seconds = static 55seconds`
     +
     `\n \t \t \t \t \t`
     +
     `TimerHasStarted = true;`
     +
     `\n \t \t \t \t`
     +
     `} //end if (TimerHasStarted ==false)`
     +
     `\n \t \t \t \t`
     +
     `unsigned long currentTime = TimeSinceBoot();`
     +
     `\n \t \t \t \t`
     +
     `if (currentTime < EndTime)`
     +
     `\n \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t`
     +
     `unsigned long remainingTime = EndTime - currentTime;  //55seconds - 25seconds = 20seconds remain`
     +
     `\n \t \t \t \t \t`
     +
     `// Other tasks can run here while the timer is active`
     +
     `\n \t \t \t \t`
     +
     `}   // end of if(currentTime < EndTime)`
     +
     `\n \t \t \t \t`
     +
     `else`
     +
     `\n \t \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t \t`
     +
     `TurnOffOutput();`
     +
     `\n \t \t \t \t`
     +
     `} // end of else statement`
     +
     `\n \t \t \t \t`
     +
     `} // end of if MeasureVoltage()<ShutOffVoltage`
     +
     `\n \t \t \t`
     +
     `else`
     +
     `\n \t \t \t`
     +
     `{`
     +
     `\n \t \t \t \t`
     +
     `TimerHasStarted = false;      //This resets the timer if the voltage goes back to stable state.`
     +
     `\n \t \t \t `
     +
     `} // end else`
     +
     `\n \t \t`
     +
     `} // end else`
     ;

     /*Low Voltage Check*/const ReconnectVoltageCheck =
     `\n`
     +
     `//*************** Void Loop Reconnect Voltage Check Section *************** this section of the code is generated by index.html using VoltageCheckRoutines.js ***************`
     +
     `\n \n \t`
     +
     `//Reconnection: If the battery voltage has been recharged over the set reconnect voltage, turn the load back on  (NEED A DELAY TO MAKE SURE IT SHOULD BE ON)`
     +
     `\n \t`
       +
     `if (MeasureVoltage()>TurnBackOnVoltage && OutputState == 0)`
     +
     `\n \t`
       +
     `{`
     +
     `\n \t \t`
     +
     `TurnOnOutput();`
     +
     `\n \t`
     +
     `} //end of if statement`
     +
     `\n \t`
     +
     `if (OverrideSelectState == LOW && LastOverrideButtonState == HIGH)`
     +
     `\n \t`
     +
     `{`
     +
     `\n \t \t`
     +
     `OverrideDelayLatch = !OverrideDelayLatch;`
     +
     `\n \t`
     +
     `} // end of if statement`
     +
     `\n \t`
     +
     `LastOverrideButtonState = OverrideSelectState;`
     +
     `\n`
     ;