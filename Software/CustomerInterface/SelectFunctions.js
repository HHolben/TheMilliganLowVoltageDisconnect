    
    var ButtonSelectFunction =       
    `//*************** Button Select Function: *************** this section of the code is generated by index.html using SelectFunctions.js ***************
    \n void Select(int SelectedPage) \n {`;

      for (let i = 2; i <= Adjustables.length -1; i++) 
      {
            ButtonSelectFunction = ButtonSelectFunction 
            +
            `\n \t`
            +
            `if (SelectedPage == ${i-2})` //start on 2 so we can skip the 0 and 1 vertices of the arrays
            +
            `\n \t`
            +
            `{`
            +
            `\n \t \t`
            +
            `${PageNamesAdjustables[i]}`
            +
            `();    // Keep updating the screen`
            +
            `\n \t \t`
            +
            `if (digitalRead(InputRight) == LOW && ${AdjustablesTargetVariables[i]} < ${AdjustablesValueLimit[i][1]})`//check if the variable is less than its upper limit
            +
            `\n \t \t`
            +
            `{`
            +
            `\n \t \t \t`
            +
            `${AdjustablesTargetTempVariables[i]} = ${AdjustablesTargetTempVariables[i]} + ${AdjustablesTargetStepSize[i]};` //increase the page's temporary variable by step size
            +
            `\n \t \t`
            +
            `} //end if (digitalRead(InputRight) == LOW && Variable < Upper limit)`
            +
            `\n \t \t`
            +
            `if (digitalRead(InputLeft) == LOW && ${AdjustablesTargetVariables[i]} > ${AdjustablesValueLimit[i][0]})`//check if the variable is greater than its lower limit
            +
            `\n \t \t`
            +
            `{`
            +
            `\n \t \t \t`
            +
            `${AdjustablesTargetTempVariables[i]} = ${AdjustablesTargetTempVariables[i]} - ${AdjustablesTargetStepSize[i]};`// decrease the page's temporary variable by step size
            +
            `\n \t \t`
            +
            `} // end of if (digitalRead(InputLeft) == LOW && variable > lower limit)`
            +
            `\n \t`
            +
            `}// end of if (SelectedPage == ITERATION)`
            ;

      }//end for
      ButtonSelectFunction = ButtonSelectFunction + `\n} //end of void Select()`;
    
       
       
/*Void Encoder Select*/var EncoderSelectFunction =
      `\n`
      +
      `//*************** Encoder Select Function: *************** this section of the code is generated by index.html using SelectFunctions.js ***************`
      +
      `\n \n \t`
      +
      `void Select(int SelectedPage)`
      +
      `\n \t`
      +
      `{`
      +
      `\n \t \t`
      +
      `long newPosition = myEncoder.read();`
      +
      `\n \t \t`
      +
      `if (newPosition != oldPosition)`
      +
      `\n \t \t`
      +
      `{`
      +
      `\n \t \t \t`
      +
      `//ChangeInPosition = ChangeInPosition % scrollThreshold;  //Not needed if ChangeInPosition reset`
      +
      `\n \t \t \t`
      +
      `ChangeInPosition++;`
      +
      `\n \t \t \t`
      +
      `if (newPosition > oldPosition)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 1;`
      +
      `\n \t \t \t`
      +
      `} // end if (newPosition > oldPosition)`
      +
      `\n \t \t \t`
      +
      `else if (newPosition < oldPosition)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 2;`
      +
      `\n \t \t \t`
      +
      `} // end else if (newPosition < oldPosition)`
      +
      `\n \t \t \t`
      +
      `else`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 0;  //Idle`
      +
      `\n \t \t \t`
      +
      `}// end else`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 0)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustNominalVoltage();    // Keep updating the screen`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage + 12;`
      +
      `\n \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], NominalVoltage)`
      +
      `\n \t \t \t \t \t`
      +
      `}// end if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t \t`
      +
      `} //end if(RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `if (NominalVoltage > 12)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage - 12;`
      +
      `\n \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], NominalVoltage)`
      +
      `\n \t \t \t \t \t`
      +
      `}// end if (NominalVoltage > 12)`
      +
      `\n \t \t \t \t`
      +
      `} // end if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t`
      +
      `} // end if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 1)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustCutOffVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold)) //clockwise`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage + 0.1;`
      +
      `\n \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], ShutOffVoltage)`
      +
      `\n \t \t \t \t \t`
      +
      `} //end if(RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage - 0.1;`
      +
      `\n \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], ShutOffVoltage)`
      +
      `\n \t \t \t \t \t`
      +
      `} // end if(LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} //end (if SelectedPage==1)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 2)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustReconnectVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage + 0.1;`
      +
      `\n \t \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], TurnBackOnVoltage)`
      +
      `\n \t \t \t \t`
      +
      `} //if (RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage - 0.1;`
      +
      `\n \t \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], TurnBackOnVoltage)`
      +
      `\n \t \t \t \t \t`
      +
      `} //end of if(LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} //end of if (SelectedPage == 2)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 3)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustOverrideTimePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay + (5*60000);`
      +
      `\n \t \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], OverrideDelay)`
      +
      `\n \t \t \t \t \t`
      +
      `}// end if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold) && (OverrideDelay > 0))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay - (5*60000);`
      +
      `\n \t \t \t \t \t \t`
      +
      `EEPROM.put(AddressNumbers[SelectedPage], OverrideDelay)`
      +
      `\n \t \t \t \t \t`
      +
      `} //end of if (LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} // if (SelectedPage == 3)`
      +
      `\n \t \t \t`
      +
      `oldPosition = newPosition;    //Update oldPosition for next iteration`
      +
      `\n \t \t`
      +
      `} // end if (newPosition != oldPosition)`
      +
      `\n \t`
      +
      `} // end void Select(int SelectedPage)`
      +
      `\n`
      ;