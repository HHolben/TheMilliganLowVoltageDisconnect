/*Void Select*/const ButtonSelectFunction =
      `\n`
      +
      `//*************** Button Select Function: *************** this section of the code is generated by index.html using SelectFunctions.js ***************`
      +
      `\n \n  \t`
      +
      `void Select(int SelectedPage)`
      +
      `\n \t`
      +
      `{`
      +
      `\n \t \t`
      +
      `if (SelectedPage == 0)`
      +
      `\n \t \t`
      +
      `{`
      +
      `\n \t \t \t`
      +
      `AdjustNominalVoltage();    // Keep updating the screen`
      +
      `\n \t \t \t`
      +
      `if (digitalRead(InputRight) == LOW && NominalVoltage <48.0)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage + 12;`
      +
      `\n \t \t \t`
      +
      `} //end if (digitalRead(InputRight) == LOW && NominalVoltage <48.0)`
      +
      `\n \t \t \t`
      +
      ` if (digitalRead(InputLeft) == LOW && NominalVoltage > 12)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage - 12;`
      +
      `\n \t \t \t \t`
      +
      `} // end of if (digitalRead(InputLeft) == LOW && NominalVoltage > 12)`
      +
      `\n \t \t \t`
      +
      `}// end of if (SelectedPage == 0)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 1)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustCutOffVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (digitalRead(InputRight) == LOW) //clockwise`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage + 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} //end if (digitalRead(InputRight) == LOW) //clockwise`
      +
      `\n \t \t \t \t`
      +
      `if (digitalRead(InputLeft) == LOW)`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage - 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} // end if(LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} //end (if SelectedPage==1)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 2)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustReconnectVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (digitalRead(InputRight) == LOW)`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage + 0.1;`
      +
      `\n \t \t \t \t \t`
      +
      `} //end if (digitalRead(InputRight) == LOW)`
      +
      `\n \t \t \t \t \t`
      +
      `if (digitalRead(InputLeft) == LOW)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage - 0.1;`
      +
      `\n \t \t \t \t \t`
      +
      `} //end of  if(LEFT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `} //end of else if (SelectedPage == 2)`
      +
      `\n \t \t \t \t`
      +
      `if (SelectedPage == 3)`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `AdjustOverrideTimePage();`
      +
      `\n \t \t \t \t \t`
      +
      `if (digitalRead(InputRight) == LOW && OverrideDelay<MaxOverrideDelay)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay + (5*60000);`
      +
      `\n \t \t \t \t \t \t`
      +
      `AdjustOverrideTimePage();`
      +
      `\n \t \t \t \t \t`
      +
      `} // end of if (digitalRead(InputRight) == LOW && OverrideDelay<MaxOverrideDelay)`
      +
      `\n \t \t \t \t`
      +
      `if (digitalRead(InputLeft) == LOW && OverrideDelay > 0)`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay - (5*60000);`
      +
      `\n \t \t \t \t \t`
      +
      `AdjustOverrideTimePage();`
      +
      `\n \t \t \t \t`
      +
      `} //end of if (digitalRead(InputLeft) == LOW && OverrideDelay > 0)`
      +
      `\n \t \t \t`
      +
      `} // end of if (SelectedPage == 3)`
      +
      `\n \t \t`
      +
      `}`
      +
      `\n`
      ;
       
/*Void Encoder Select*/const EncoderSelectFunction =
      `\n`
      +
      `//*************** Encoder Select Function: *************** this section of the code is generated by index.html using SelectFunctions.js ***************`
      +
      `\n \n \t`
      +
      `void Select(int SelectedPage)`
      +
      `\n \t`
      +
      `{`
      +
      `\n \t \t`
      +
      `long newPosition = myEncoder.read();`
      +
      `\n \t \t`
      +
      `if (newPosition != oldPosition)`
      +
      `\n \t \t`
      +
      `{`
      +
      `\n \t \t \t`
      +
      `//ChangeInPosition = ChangeInPosition % scrollThreshold;  //Not needed if ChangeInPosition reset`
      +
      `\n \t \t \t`
      +
      `ChangeInPosition++;`
      +
      `\n \t \t \t`
      +
      `if (newPosition > oldPosition)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 1;`
      +
      `\n \t \t \t`
      +
      `} // end if (newPosition > oldPosition)`
      +
      `\n \t \t \t`
      +
      `else if (newPosition < oldPosition)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 2;`
      +
      `\n \t \t \t`
      +
      `} // end else if (newPosition < oldPosition)`
      +
      `\n \t \t \t`
      +
      `else`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `EncoderDirection = 0;  //Idle`
      +
      `\n \t \t \t`
      +
      `}// end else`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 0)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustNominalVoltage();    // Keep updating the screen`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage + 12;`
      +
      `\n \t \t \t \t \t`
      +
      `}// end if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t \t`
      +
      `} //end if(RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `if (NominalVoltage > 12)`
      +
      `\n \t \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t \t`
      +
      `NominalVoltage = NominalVoltage - 12;`
      +
      `\n \t \t \t \t \t`
      +
      `}// end if (NominalVoltage > 12)`
      +
      `\n \t \t \t \t`
      +
      `} // end if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t`
      +
      `} // end if (NominalVoltage < 48.0)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 1)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustCutOffVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold)) //clockwise`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage + 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} //end if(RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `ShutOffVoltage = ShutOffVoltage - 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} // end if(LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} //end (if SelectedPage==1)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 2)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustReconnectVoltagePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage + 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} //if (RIGHT_State == HIGH)`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `TurnBackOnVoltage = TurnBackOnVoltage - 0.1;`
      +
      `\n \t \t \t \t`
      +
      `} //end of if(LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} //end of if (SelectedPage == 2)`
      +
      `\n \t \t \t`
      +
      `if (SelectedPage == 3)`
      +
      `\n \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t`
      +
      `AdjustOverrideTimePage();`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay + (5*60000);`
      +
      `\n \t \t \t \t`
      +
      `}// end if (EncoderDirection == 2 && abs(ChangeInPosition >= scrollThreshold))`
      +
      `\n \t \t \t \t`
      +
      `if (EncoderDirection == 1 && abs(ChangeInPosition >= scrollThreshold) && (OverrideDelay > 0))`
      +
      `\n \t \t \t \t`
      +
      `{`
      +
      `\n \t \t \t \t \t`
      +
      `OverrideDelay = OverrideDelay - (5*60000);`
      +
      `\n \t \t \t \t`
      +
      `} //end of if (LEFT_State == HIGH)`
      +
      `\n \t \t \t`
      +
      `} // if (SelectedPage == 3)`
      +
      `\n \t \t \t`
      +
      `oldPosition = newPosition;    //Update oldPosition for next iteration`
      +
      `\n \t \t`
      +
      `} // end if (newPosition != oldPosition)`
      +
      `\n \t`
      +
      `} // end void Select(int SelectedPage)`
      +
      `\n`
      ;