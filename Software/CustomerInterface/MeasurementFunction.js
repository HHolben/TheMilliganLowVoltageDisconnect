/*Voltage Measurement*/const VoltageMeasurementFunction =
     `\n`
     +
     `//*************** Voltage Measurement Function *************** this section of the code is generated by index.html using MeasurementFunction.js ***************`
     +
     `\n \n \t`
     +
     `float MeasureVoltage()`
     +
     `\n \t`
     +
     `{`
     +
     `\n \t \t`
     +
     `float VoltageMeasurement = ((analogRead(VoltageProbe))*5.096/1023.00)/0.16604057; //The ratio is 5 Vo*0.16604057lts (max voltage that can go into a pin)/ 1023 (AnalogRead() measures between 0 and 1023`
     +
     `\n \t \t`
     +
     `float BatteryVoltageUndrounded = VoltageMeasurement; //This uses voltage divider math to caclulate the battery voltage.`
     +
     `\n \t \t`
     +
     `//dtostrf(VoltageMeasurement,3,2,buffer);`
     +
     `\n \t \t`
     +
     `float sum = 0.0;`
     +
     `\n \t \t`
     +
     `readings[index] = VoltageMeasurement;`
     +
     `\n \t \t`
     +
     `index = (index + 1) % numReadings;  // Move to the next index, and wrap around if necessary with %`
     +
     `\n \t \t`
     +
     `// Calculate the sum of the readings`
     +
     `\n \t \t`
     +
     `for (int i = 0; i < numReadings; i++)` 
     +
     `\n \t \t`
     +
     `{`
     +
     `\n \t \t \t`
     +
     `sum += readings[i];`
     +
     `\n \t \t`
     +
     `} // end for (int i = 0; i < numReadings; i++)`
     +
     `\n \t \t`
     +
     `// Calculate the average`
     +
     `\n \t \t`
     +
     `float averageVoltage = sum / numReadings;`
     +
     `\n \t \t`
     +
     `float BatteryVoltage = round(averageVoltage * 10.0) / 10.0;`
     +
     `\n \t \t`
     +
     `return(BatteryVoltage);`
     +
     `\n \t`
     +
     `} //end of function, MeasureVoltage()`
     +
     `\n`
     ;
